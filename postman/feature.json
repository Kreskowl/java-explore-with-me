{
	"info": {
		"_postman_id": "2e6da684-b79b-458e-bfec-6a58d6357f25",
		"name": "comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40092460"
	},
	"item": [
		{
			"name": "public",
			"item": [
				{
					"name": "200 get comments for event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 when event has no comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is empty array\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\").that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/{{eventIdEmpty}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventIdEmpty}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 when event not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/99999/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"99999",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 when string in request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/abc/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"abc",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 when from is negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/{{eventId}}/comments?from=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventId}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 when size is zero Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/events/{{eventId}}/comments?size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventId}}",
								"comments"
							],
							"query": [
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\"Получение комментариев к опубликованному событию\""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "private",
			"item": [
				{
					"name": "GET 200 success default params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success empty comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is empty array\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\").that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments?eventId={{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by size and from",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 404 when user not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/999999/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999999",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 404 when event not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments?eventId=9999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "9999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when from below 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{userId}/comments?from=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{userId}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when size is 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{userId}/comments?size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{userId}",
								"comments"
							],
							"query": [
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when user id is string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/abc/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"abc",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 201 Add comment success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"    pm.expect(json).to.have.property(\"id\");\r",
									"    pm.expect(json).to.have.property(\"text\");\r",
									"    pm.expect(json).to.have.property(\"authorName\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Check this one ASAP\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 400 when blank text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \" \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 404 when user not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Check this one ASAP\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/999999/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"999999",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 404 when event not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Check this one ASAP\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/9999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST 409 when comment to unpublished event Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Check this one ASAP\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{draftEventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{draftEventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH 201 Update comment success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"    pm.expect(json).to.have.property(\"id\");\r",
									"    pm.expect(json).to.have.property(\"text\");\r",
									"    pm.expect(json).to.have.property(\"authorName\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH 400 when blank text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \" \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH 404 when user not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/9999999/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999999",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH 404 when comment not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH 409 when update not by author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update by wrong user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 get comment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"    pm.expect(json).to.have.property(\"id\");\r",
									"    pm.expect(json).to.have.property(\"text\");\r",
									"    pm.expect(json).to.have.property(\"authorName\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 404 when user not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/9999999/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999999",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 404 when comment not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 409 when request not by author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE 404 when user not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/9999999/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9999999",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE 404 when comment not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 409 when request not by author Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE 204 success delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{user2Id}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user2Id}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "GET 200 success with default params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?userIds={{user1Id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "{{user1Id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by event id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?eventIds={{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "eventIds",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by comment id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?commentIds={{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "commentIds",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by low text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?text=great",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "great"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by data range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?rangeStart=2025-06-01 00:00:00&rangeEnd=2025-06-02 23:59:59",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2025-06-01 00:00:00"
								},
								{
									"key": "rangeEnd",
									"value": "2025-06-02 23:59:59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by size and from params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?from=0&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by ascending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?sort=ASC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success by descending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK and array\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?sort=DESC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when data has wrong format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request due to invalid date\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?rangeStart=not-a-date",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "not-a-date"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when user ids has wrong format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request due to invalid date\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?userIds=a,b,c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "userIds",
									"value": "a,b,c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when event ids has wrong format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request due to invalid date\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?eventIds=a,b,c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "eventIds",
									"value": "a,b,c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when comment ids has wrong format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request due to invalid date\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?commentIds=a,b,c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "commentIds",
									"value": "a,b,c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when from below 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request due to invalid date\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?from=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when size is 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request due to invalid date\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?size=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 200 success find comment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"    pm.expect(json).to.have.property(\"id\");\r",
									"    pm.expect(json).to.have.property(\"text\");\r",
									"    pm.expect(json).to.have.property(\"authorName\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 404 when comment not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/9999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET 400 when id is string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE 204 success delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentToDelete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentToDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE 404 when comment not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/9999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE 400 when id is string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"abc"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ==== API ====\r",
					"class API {\r",
					"    constructor(postman, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"    }\r",
					"\r",
					"    async post(path, body) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            this.pm.sendRequest({\r",
					"                url: this.baseUrl + path,\r",
					"                method: \"POST\",\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"                body: { mode: \"raw\", raw: JSON.stringify(body) }\r",
					"            }, (err, res) => {\r",
					"                if (err || res.code >= 400) {\r",
					"                    console.error(\"POST failed\", err || res.json());\r",
					"                    return reject(err || res.json());\r",
					"                }\r",
					"                resolve(res.json());\r",
					"            });\r",
					"        });\r",
					"    }\r",
					"\r",
					"    async patch(path, body) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            this.pm.sendRequest({\r",
					"                url: this.baseUrl + path,\r",
					"                method: \"PATCH\",\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"                body: { mode: \"raw\", raw: JSON.stringify(body) }\r",
					"            }, (err, res) => {\r",
					"                if (err || res.code >= 400) {\r",
					"                    console.error(\"PATCH failed\", err || res.json());\r",
					"                    return reject(err || res.json());\r",
					"                }\r",
					"                resolve(res.json());\r",
					"            });\r",
					"        });\r",
					"    }\r",
					"}\r",
					"\r",
					"// ==== RandomUtils ====\r",
					"class RandomUtils {\r",
					"    getUser(ts) {\r",
					"        return {\r",
					"            name: `User_${ts}`,\r",
					"            email: `user_${ts}@test.com`\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory(ts) {\r",
					"        return { name: `Category_${ts}` };\r",
					"    }\r",
					"\r",
					"    getEvent(ts, categoryId, eventDate) {\r",
					"        return {\r",
					"            annotation: `Annotation_${ts}`,\r",
					"            category: categoryId,\r",
					"            description: \"Auto-generated description for event\",\r",
					"            eventDate: eventDate,\r",
					"            location: { lat: 55.75, lon: 37.61 },\r",
					"            paid: false,\r",
					"            participantLimit: 100,\r",
					"            requestModeration: false,\r",
					"            title: `Title_${ts}`\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getFutureDate(hours = 2) {\r",
					"        const date = new Date(Date.now() + hours * 60 * 60 * 1000);\r",
					"        return date.toISOString().replace(\"T\", \" \").substring(0, 19);\r",
					"    }\r",
					"}\r",
					"\r",
					"// ==== Main Script ====\r",
					"const main = async () => {\r",
					"    const ts = Date.now();\r",
					"    const baseUrl = pm.variables.get(\"baseUrl\") || \"http://localhost:8080\";\r",
					"    const api = new API(pm, baseUrl);\r",
					"    const rnd = new RandomUtils();\r",
					"\r",
					"    try {\r",
					"        // Очистка переменных\r",
					"        [\r",
					"            \"user1Id\", \"user2Id\", \"categoryId\", \"eventId\", \"eventIdEmpty\",\r",
					"            \"draftEventId\", \"commentId\", \"commentToDelete\", \"ts\"\r",
					"        ].forEach(v => pm.collectionVariables.unset(v));\r",
					"\r",
					"        // === Users ===\r",
					"        const u1 = await api.post(\"/admin/users\", rnd.getUser(ts));\r",
					"        const u2 = await api.post(\"/admin/users\", rnd.getUser(ts + 1));\r",
					"        pm.collectionVariables.set(\"user1Id\", u1.id);\r",
					"        pm.collectionVariables.set(\"user2Id\", u2.id);\r",
					"\r",
					"        // === Category ===\r",
					"        const cat = await api.post(\"/admin/categories\", rnd.getCategory(ts));\r",
					"        pm.collectionVariables.set(\"categoryId\", cat.id);\r",
					"\r",
					"        // === Published event ===\r",
					"        const event = await api.post(`/users/${u1.id}/events`, rnd.getEvent(ts, cat.id, rnd.getFutureDate(6)));\r",
					"        await api.patch(`/admin/events/${event.id}`, {stateAction: \"PUBLISH_EVENT\"});\r",
					"        pm.collectionVariables.set(\"eventId\", event.id);\r",
					"\r",
					"        // === Empty event (published, no comments) ===\r",
					"        const event2 = await api.post(`/users/${u1.id}/events`, rnd.getEvent(ts + \"_empty\", cat.id, rnd.getFutureDate(6)));\r",
					"        await api.patch(`/admin/events/${event2.id}`, { stateAction: \"PUBLISH_EVENT\" });\r",
					"        pm.collectionVariables.set(\"eventIdEmpty\", event2.id);\r",
					"\r",
					"        // === Draft event (unpublished) ===\r",
					"        const draft = await api.post(`/users/${u1.id}/events`, rnd.getEvent(ts + \"_draft\", cat.id, rnd.getFutureDate(6)));\r",
					"        pm.collectionVariables.set(\"draftEventId\", draft.id);\r",
					"\r",
					"        // === Comments ===\r",
					"        const comment = await api.post(`/users/${u2.id}/comments/${event.id}`, { text: \"Great event!\" });\r",
					"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
					"\r",
					"        const commentToDelete = await api.post(`/users/${u2.id}/comments/${event.id}`, { text: \"for admin delete!\" });\r",
					"        pm.collectionVariables.set(\"commentToDelete\", commentToDelete.id);\r",
					"\r",
					"        pm.collectionVariables.set(\"ts\", ts);\r",
					"\r",
					"        console.log(\"✅ Init completed.\");\r",
					"    } catch (err) {\r",
					"        console.error(\"❌ Init failed\", err);\r",
					"    }\r",
					"};\r",
					"\r",
					"// ==== Условие автозапуска ====\r",
					"if (pm.collectionVariables.get(\"shouldInit\") === \"true\") {\r",
					"    const interval = setInterval(() => {}, 1000);\r",
					"    setTimeout(async () => {\r",
					"        await main();\r",
					"        clearInterval(interval);\r",
					"    }, 100);\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "shouldInit",
			"value": "true",
			"type": "string"
		},
		{
			"key": "user1Id",
			"value": ""
		},
		{
			"key": "user2Id",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "eventIdEmpty",
			"value": ""
		},
		{
			"key": "draftEventId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "commentToDelete",
			"value": ""
		},
		{
			"key": "ts",
			"value": ""
		}
	]
}